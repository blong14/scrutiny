apiVersion: batch/v1
kind: CronJob
metadata:
  name: {{ include "scrutiny.fullname" . }}-news-cron
  labels:
    {{- include "scrutiny.labels" . | nindent 4 }}
spec:
  concurrencyPolicy: Allow
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "scrutiny.selectorLabels" . | nindent 8 }}
    spec:
      template:
        spec:
          {{- with .Values.affinity }}
          affinity:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          containers:
            - args:
            {{- range $value := .Values.News.cronjob.command.args }}
               - {{ $value }}
            {{- end }}
            {{- if .Values.News.cronjob.command.enabled }}
              command: [{{ .Values.News.cronjob.command.value }}]
            {{- end }}
              env:
              {{- range $key, $value := .Values.env }}
                - name: {{ $key }}
                  value: {{ $value | quote }}
              {{- end }}
              image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
              imagePullPolicy: {{ .Values.image.pullPolicy }}
              name: {{ .Chart.Name }}-news-cron
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: {{ .Values.News.cronjob.schedule | quote }}
  successfulJobsHistoryLimit: 1
  suspend: false
